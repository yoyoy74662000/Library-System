/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package libraryassignment;

import com.sun.rowset.CachedRowSetImpl;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.util.Random;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import static libraryassignment.Two.conn;
import java.util.Calendar;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sql.rowset.CachedRowSet;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author Makubex
 */
public class Four extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form FourthPage
     */
    int posx,

    /**
     * Creates new form Four
     */
    posy;

    static Connection conn;
    /* book table */
    String isbn, title;
    /* borrower table */
    String card_no,ssn,first_name, last_name, address, phone;
    /* library_branch table */
  /*  String branch_id, branch_name; */
    /* book_authors */
    String author_name,author_id;
    /* book_copies */
    String no_of_copies;
    /* book_loans */
    String loan_id,date_out, due_date;
    int linect = 0;
    String output = "";
    String available = "";
    String[] columnNames1 = {"ISBN","Book Title", "Total", "Available"};
    String[] columnNames2 = {"ISBN","Book Title", "Date Out", "Date Due", "Fine"};

    DefaultTableModel model1, model2;
    String eno;
    int width = 800;
    int height = 500;
    String date = new SimpleDateFormat("yyyy-mm-dd").format(new Date());
    String date1 = new SimpleDateFormat("yyyy-dd-MM").format(new Date());

    public Four() {
    }

    public Four(String text) {
        super();
        eno = text;
        initComponents();
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        Double x = (screen.getWidth() - this.width) / 2;
        Double y = (screen.getHeight() - this.height) / 2;
        posx = x.intValue();
        posy = y.intValue();
        this.setLocation(posx, posy);
        //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel7 = new javax.swing.JPanel();
        jColorChooser1 = new javax.swing.JColorChooser();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        model1 = new DefaultTableModel();
        model1.setColumnIdentifiers(columnNames1);
        jTable1 = new javax.swing.JTable(model1);
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        model2 = new DefaultTableModel();
        model2.setColumnIdentifiers(columnNames2);
        jTable2 = new javax.swing.JTable(model2)
        ;
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel(date1);
        jButton8 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setBackground(new java.awt.Color(51, 0, 255));

        jPanel3.setBackground(new java.awt.Color(204, 204, 255));

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel3.setText("Title");

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel1.setText("ISBN");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel2.setText("Author Name");

        jButton1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(51, 204, 0));
        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButton2.setForeground(new java.awt.Color(51, 204, 0));
        jButton2.setText("Check Out");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jTable1.setModel(model1);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 837, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1)
                    .addComponent(jTextField3)
                    .addComponent(jTextField2))
                .addGap(49, 49, 49)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE))
                .addGap(18, 18, 18))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Check Out", jPanel3);

        jPanel2.setBackground(new java.awt.Color(204, 204, 255));

        jTable2.setModel(model2);
        jScrollPane2.setViewportView(jTable2);

        jButton3.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButton3.setForeground(new java.awt.Color(51, 204, 0));
        jButton3.setText("Show Borrowed Books");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButton4.setForeground(new java.awt.Color(51, 204, 0));
        jButton4.setText("Check In");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButton8.setForeground(new java.awt.Color(51, 204, 0));
        jButton8.setText("Pay Fine");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 795, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(709, Short.MAX_VALUE)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Check In", jPanel4);

        jButton7.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButton7.setForeground(new java.awt.Color(51, 204, 0));
        jButton7.setText("Logout");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 795, Short.MAX_VALUE)
            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel9Layout.createSequentialGroup()
                    .addGap(343, 343, 343)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(343, Short.MAX_VALUE)))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 487, Short.MAX_VALUE)
            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel9Layout.createSequentialGroup()
                    .addGap(219, 219, 219)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(220, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Logout", jPanel8);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int column;
        int flag = 0;
        Integer count = 0;
        conn = null;
        try {
            // Create a connection to the local MySQL server, with the "company" database selected.
            conn = DriverManager.getConnection("jdbc:mysql://localhost", "root", "yoyo1221");

            // Create a SQL statement object and execute the query.
            Statement stmt = conn.createStatement();
            //String q;
            stmt.executeQuery("use library1;");
            //q = "INSERT INTO book_loans VALUES(\"" + book_id + "\"," + branch_id + ",\"" + eno + "\",CURRENT_DATE(),CURRENT_DATE()+14);";
            //System.out.println(q);
            //ResultSet rs = stmt.executeQuery("SELECT b.title, b.book_id, lb.branch_id;");
            ResultSet rs = stmt.executeQuery("SELECT COUNT(*) FROM book_loans where card_no=\"" + eno + "\";");
            JOptionPane.showMessageDialog(null, "Successfully checked out!");
            while (rs.next()) {
                count = rs.getInt("COUNT(*)");
            }
            System.out.print("Count is " + count);
            if (count >= 3) {
                flag = 1;
            }
            rs.close();
            conn.close();
            System.out.println("Success!!");
            
        } catch (SQLException ex) {
            System.out.println("Error in connection: " + ex.getMessage());
        }
        if (flag == 1) {
            JOptionPane.showMessageDialog(null, "Can borrow maximum of 3 books! Limit reached!");
        } else {
            try {

                int selectedRow = jTable1.getSelectedRow();
                int rowCount = model1.getRowCount();
                int columnCount = model1.getColumnCount();
                for (column = 0; column < columnCount; column++) {
                    System.out.println(jTable1.getValueAt(selectedRow, column) + ", ");
                }
                isbn = (String) jTable1.getValueAt(selectedRow, 1);
               available = (String) jTable1.getValueAt(selectedRow, columnCount - 1);

                System.out.println();
                if (available.equals("0")) {
                    JOptionPane.showMessageDialog(null, "No copies available!!!");
                } else {
                    conn = null;
                    try {
                        Integer loan_id = 0;
                        // Create a connection to the local MySQL server, with the "company" database selected.
                        conn = DriverManager.getConnection("jdbc:mysql://localhost", "root", "yoyo1221");

                        // Create a SQL statement object and execute the query.
                        Statement stmt = conn.createStatement();
                        //String q;
                        stmt.executeQuery("use library1;");
                        //q = "INSERT INTO book_loans VALUES(\"" + book_id + "\"," + branch_id + ",\"" + eno + "\",CURRENT_DATE(),CURRENT_DATE()+14);";
                        //System.out.println(q);
                        //ResultSet rs = stmt.executeQuery("SELECT b.title, b.book_id, lb.branch_id;");
                        stmt.executeUpdate("INSERT INTO book_loans (loan_id,isbn,card_no,date_out,due_date) VALUES(\"" + loan_id+ "\"," + isbn + ",\"" + eno + "\",CURRENT_DATE(),DATE_ADD(CURRENT_DATE(), INTERVAL 14 DAY));");
                        ResultSet rs1 = stmt.executeQuery("SELECT loan_id FROM book_loans where card_no=\"" + eno + "\";");
                        while (rs1.next()) {
                            loan_id = rs1.getInt("loan_id");
                        }
                        stmt.executeUpdate("INSERT INTO fines VALUES(\"" + loan_id + "\"," + "0.0" + ",\"" + "1\");");
                        //rs.close();
                        conn.close();
                        System.out.println("Success!!");
                    } catch (SQLException ex) {
                        System.out.println("Error in connection: " + ex.getMessage());
                    }
                }
            } catch (Exception e) {
            }
            conn = null;
            try {
                // Create a connection to the local MySQL server, with the "company" database selected.
                conn = DriverManager.getConnection("jdbc:mysql://localhost", "root", "yoyo1221");

                // Create a SQL statement object and execute the query.
                Statement stmt = conn.createStatement();
                stmt.executeQuery("use library1;");
                String s = "Select b.title, b.isbn,no_of_copies as Total, no_of_copies-"+count+" as Avaialable from book b "
                    + "inner join book_copies bc on b.isbn=bc.isbn "
                    + "inner join book_authors ba on b.isbn = ba.isbn "
                    + "left outer join book_loans bl on bl.isbn=b.isbn "
                    + "where b.isbn like \"%"+ jTextField1.getText()
                    + "%\"and ba.author_name like \"%"+ jTextField2.getText()
                    + "%\"and b.title like \"%"+jTextField3.getText()
                    + "%\"" + "order by b.title;";
            System.out.println(s);
            
            ResultSet rs = stmt.executeQuery(s);   
               /* 
                ResultSet rs = stmt.executeQuery("SELECT b.title, b.isbn "
                        + "No_of_copies as Total, No_of_copies-"+count+" as Available from book b "
                        + "inner join book_copies bc on b.isbn=bc.isbn "
                        + "inner join book_authors ba on b.isbn=ba.isbn "
                        + "left outer join book_loans bl on bl.isbn=b.isbn"
                        + "where b.isbn like \"%" + jTextField1.getText()
                        + "%\" and ba.author_name like \"%" + jTextField2.getText()
                        + "%\" and b.title like \"%" + jTextField3.getText()
                        + "%\"" + "order by b.title;");*/
                for (int i = model1.getRowCount() - 1; i > -1; i--) {
                    model1.removeRow(i);
                }
                // Iterate through the result set.
                while (rs.next()) {
                    // Keep track of the line/tuple count
                    linect++;
                    title = rs.getString("title");
                    isbn = rs.getString("isbn");
                    author_name = rs.getString("author");
                    no_of_copies = rs.getString("Total");
                    available = rs.getString("Available");
                    model1.addRow(new Object[]{title, isbn, author_name ,no_of_copies, available});
                    output = output + title + "\t" + isbn + "\t" + author_name +"\t" + no_of_copies + "\t" + available + "\n";
                    System.out.print(title);
                    System.out.print("\t");
                    System.out.print(isbn);
                    System.out.print("\t");
                    System.out.print(isbn);
                    System.out.print("\t");
                    System.out.print(author_name);
                    System.out.print("\t");
                    System.out.print(no_of_copies);
                    System.out.print("\t");
                    System.out.print(available);
                    System.out.print("\n");
                    System.out.println();

                } // End while(rs.next())
                // Always close the recordset and connection.
                rs.close();
                conn.close();
                System.out.println("Success!!");
            } catch (SQLException ex) {
                System.out.println("Error in connection: " + ex.getMessage());
            }
    }//GEN-LAST:event_jButton2ActionPerformed
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        conn = null;
        Integer count = 0;
        try {
            // Create a connection to the local MySQL server, with the "company" database selected.
            conn = DriverManager.getConnection("jdbc:mysql://localhost", "root", "yoyo1221");

            // Create a SQL statement object and execute the query.
            
            Statement stmt1=conn.createStatement();
            stmt1.executeQuery("use library1");
            ResultSet r=stmt1.executeQuery("SELECT COUNT(*) as count FROM book_loans where card_no=\"" + eno + "\";");
            while(r.next())
            count=r.getInt("count");
           // System.out.print("Count is " + count);
            
            Statement stmt = conn.createStatement();

            stmt.executeQuery("use library1;");
            
            String s = "Select b.title, b.isbn,no_of_copies as Total, no_of_copies-"+count+" as Avaialable from book b "
                    + "inner join book_copies bc on b.isbn=bc.isbn "
                    + "inner join book_authors ba on b.isbn = ba.isbn "
                    + "left outer join book_loans bl on bl.isbn=b.isbn "
                    + "where b.isbn like \"%"+ jTextField1.getText()
                    + "%\"and ba.author_name like \"%"+ jTextField2.getText()
                    + "%\"and b.title like \"%"+jTextField3.getText()
                    + "%\"" + "order by b.title;";
            System.out.println(s);
            
            ResultSet rs = stmt.executeQuery(s);           
           
            
            
            for (int i = model1.getRowCount() - 1; i > -1; i--) {
                model1.removeRow(i);
            }
            // Iterate through the result set.
            int i = 0;
            while (rs.next()) {
//                 Keep track of the line/tuple count
                if(i > 100){
                    break;
                }
                System.out.println(rs.getMetaData());
                linect++;
                title = rs.getString("title");
                isbn = rs.getString("isbn");
                no_of_copies = rs.getString("Total");
                available = rs.getString("Avaialable");
                model1.addRow(new Object[]{isbn, title, no_of_copies, available});
                output = output + isbn + "\t" +title+ "\t" +no_of_copies+"\t" + available+"\n";
                System.out.println(output);
                //model1.addRow(new Object[]{title, isbn, no_of_copies, available});
                i++;
//                no_of_copies = rs.getString("Total");
//                available = rs.getString("Available");
//                model1.addRow(new Object[]{title, isbn, no_of_copies, available});
//                output = output + title + "\t" + isbn+ "\t" + no_of_copies + "\t" + available + "\n";


            } // End while(rs.next())
            // Always close the recordset and connection.
            rs.close();
            conn.close();
            System.out.println("Success!!");
        } catch (SQLException ex) {
            System.out.println("Error in connection: " + ex.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        int n = JOptionPane.showConfirmDialog(
                this,
                "Do you want tozlogout?",
                "Confirmation",
                JOptionPane.YES_NO_OPTION);
        if (n == 0) {
            Three page3 = new Three();
            page3.setVisible(true);
            dispose();
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable2.getSelectedRow();
        String fine = "";
        conn = null;
        isbn= (String) jTable2.getValueAt(selectedRow, 0);
        fine = (String) jTable2.getValueAt(selectedRow, 4);
        if (Double.parseDouble(fine) == 0.0) {
            model2.removeRow(jTable2.getSelectedRow());
            try {
                // Create a connection to the local MySQL server, with the "company" database selected.
                conn = DriverManager.getConnection("jdbc:mysql://localhost", "root", "yoyo1221");

                // Create a SQL statement object and execute the query.
                Statement stmt = conn.createStatement();

                stmt.executeQuery("use library1;");
                stmt.executeUpdate("DELETE FROM book_loans WHERE ISBN=\"" + isbn + "\" AND card_no=\"" + eno + "\";");
                for (int i = model2.getRowCount() - 1; i > -1; i--) {
                    model2.removeRow(i);
                }

                conn.close();
                System.out.println("Success!!");
            } catch (SQLException ex) {
                System.out.println("Error in connection: " + ex.getMessage());
            }
            String date_out = "", date_due = "";
            conn = null;
            try {
                // Create a connection to the local MySQL server, with the "company" database selected.
                conn = DriverManager.getConnection("jdbc:mysql://localhost", "root", "yoyo1221");

                // Create a SQL statement object and execute the query.
                Statement stmt = conn.createStatement();

                stmt.executeQuery("use library1;");
                ResultSet rs = stmt.executeQuery("SELECT * from book_loans NATURAL JOIN book NATURAL JOIN borrower WHERE card_no=" + eno + ";");
                for (int i = model2.getRowCount() - 1; i > -1; i--) {
                    model2.removeRow(i);
                }
                // Iterate through the result set.
                while (rs.next()) {
                    // Keep track of the line/tuple count
                    linect++;
                    isbn = rs.getString("isbn");
                    title = rs.getString("title");
                    date_out = rs.getString("date_out");
                    date_due = rs.getString("due_date");
                  
                    model2.addRow(new Object[]{isbn, title,date_out, date_due, fine});
                    output = output + isbn + "\t" + title + "\t"  + date_out + "\t" + date_due + "\n";
                    System.out.print(output);
                    /*System.out.print(isbn);
                    System.out.print("\t");
                    System.out.print(title);
                    System.out.print("\t");
                    System.out.print(date_out);
                    System.out.print("\t");
                    System.out.print(date_due);
                    System.out.print("\n");
                    System.out.println();*/

                } // End while(rs.next())
                // Always close the recordset and connection.
                rs.close();
                conn.close();
                System.out.println("Success!!");
            } catch (SQLException ex) {
                System.out.println("Error in connection: " + ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Pay fine before returning book!");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String date_out = "", date_due = "", fine = "";
        String l_id = "", pay_flag = "";

        conn = null;
        try {
            // Create a connection to the local MySQL server, with the "company" database selected.
            conn = DriverManager.getConnection("jdbc:mysql://localhost", "root", "yoyo1221");

            // Create a SQL statement object and execute the query.
            Statement stmt = conn.createStatement();

            stmt.executeQuery("use library1;");

            ResultSet rs = stmt.executeQuery("SELECT * from book_loans NATURAL JOIN book NATURAL JOIN borrower WHERE card_no=" + eno + ";");
            CachedRowSet rowset;
            rowset = new CachedRowSetImpl();
            rowset.populate(rs);
            for (int i = model2.getRowCount() - 1; i > -1; i--) {
                model2.removeRow(i);
            }

            // Iterate through the result set.
            while (rowset.next()) {
                // Keep track of the line/tuple count
                linect++;
                isbn = rowset.getString("isbn");
                title = rowset.getString("title");
               date_out = rowset.getString("date_out");
                date_due = rowset.getString("due_date");
                l_id = rowset.getString("loan_id");

                //System.out.println("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + date_due);
                SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                Date date1 = format.parse(date_due);
                Date date2 = new Date();
                if (date1.compareTo(date2) <= 0) {

                    ResultSet rs1 = stmt.executeQuery("SELECT paid FROM fines WHERE loan_id=\"" + l_id + "\";");
                    while (rs1.next()) {
                        pay_flag = rs1.getString("paid");
                    }
                    System.out.println("flaggggggggggggg: " + pay_flag);
                    if (Integer.parseInt(pay_flag) == 1) {
                        int diffInDays = (int) ((date1.getTime() - date2.getTime()) / (1000 * 60 * 60 * 24));
                        //System.out.println("AA" + diffInDays);
                        Double f = -0.25 * diffInDays;
                        fine = f.toString();

                        stmt.executeUpdate("UPDATE fines SET fine_amt=" + f + "WHERE loan_id=\"" + l_id + "\";");

                    } else {
                        stmt.executeUpdate("UPDATE book_loans SET due_date = DATE_ADD(CURRENT_DATE(), INTERVAL 14 DAY),date_in=CURRENT_DATE() WHERE loan_id=\"" + l_id + "\";");
                        stmt.executeUpdate("UPDATE fines SET paid=1 WHERE loan_id=\"" + l_id + "\";");
                        fine = "0.0";
                    }
                } else {
                    fine = "0.0";
                    //System.out.println(date1.compareTo(date2) + "dateString2 is an earlier date than dateString1");
                }

                model2.addRow(new Object[]{isbn, title, date_out, date_due, fine});
                output = output + isbn + "\t" + title + "\t" + date_out + "\t" + date_due + "\t" + fine + "\n";

                System.out.print(isbn);
                System.out.print("\t");
                System.out.print(title);
                System.out.print("\t");
                System.out.print(date_out);
                System.out.print("\t");
                System.out.print(date_due);
                System.out.print("\n");
                System.out.println();

            } // End while(rs.next())
            // Always close the recordset and connection.

            conn.close();
            System.out.println("Success!!");
        } catch (SQLException ex) {
            System.out.println("Error in connection: " + ex.getMessage());
        } catch (ParseException ex) {
            Logger.getLogger(Four.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        String l_id = "", check_book = "", check_branch = "";
        int selectedRow = jTable2.getSelectedRow();
        String fine = "";
        conn = null;
        fine = (String) jTable2.getValueAt(selectedRow, 4);
        check_branch = (String) jTable2.getValueAt(selectedRow, 2);
        check_book = (String) jTable2.getValueAt(selectedRow, 0);
        System.out.println("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + selectedRow);
        if (Double.parseDouble(fine) > 0.0) {
            JOptionPane.showMessageDialog(null, "Fine Paid! Money debited from student's account!");

            String date_out = "", date_due = "";
            conn = null;
            try {
                // Create a connection to the local MySQL server, with the "company" database selected.
                conn = DriverManager.getConnection("jdbc:mysql://localhost", "root", "yoyo1221");

                // Create a SQL statement object and execute the query.
                Statement stmt = conn.createStatement();

                stmt.executeQuery("use library1;");

                ResultSet rs = stmt.executeQuery("SELECT * from book_loans NATURAL JOIN book NATURAL JOIN borrower WHERE card_no=" + eno + ";");
                for (int i = model2.getRowCount() - 1; i > -1; i--) {
                    model2.removeRow(i);
                }
                CachedRowSet rowset = new CachedRowSetImpl();
                rowset.populate(rs);
                // Iterate through the result set.
                while (rowset.next()) {
                    // Keep track of the line/tuple count
                    linect++;
                    isbn = rowset.getString("book_id");
                    title = rowset.getString("title");
                    date_out = rowset.getString("date_out");
                    date_due = rowset.getString("due_date");
                    
                    if ((isbn.equals(check_book))) {
                        System.out.println("current: " + isbn + "\ncurrent: " + "\ncheck: " + check_book);
                        ResultSet rs1 = stmt.executeQuery("SELECT loan_id FROM book_loans where book_id=\"" + isbn+ "\" ;");
                        while (rs1.next()) {
                            l_id = rs1.getString("loan_id");
                        }
                        stmt.executeUpdate("UPDATE fines SET paid=0 WHERE loan_id=\"" + l_id + "\";");
                        fine = "0.0";
                    }
                    model2.addRow(new Object[]{isbn, title, date_out, date_due, fine});
                    output = output + isbn + "\t" + title + "\t" + date_out + "\t" + date_due + "\t" + fine + "\n";

                    System.out.print(isbn);
                    System.out.print("\t");
                    System.out.print(title);
                    System.out.print("\t");
                    System.out.print(date_out);
                    System.out.print("\t");
                    System.out.print(date_due);
                    System.out.print("\n");
                    System.out.println();

                } // End while(rs.next())
                // Always close the recordset and connection.
                rowset.close();
                conn.close();
                System.out.println("Success!!");
            } catch (SQLException ex) {
                System.out.println("Error in connection: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Four.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Four.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Four.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Four.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Four("").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

}
